@mixin valid-border-element-states {
  &:valid,
  &.is-valid {
    border-color: $primary-light-color;
    &:focus {
      border-color: $primary-light-color;
    }
  }
}

.root {
  // used only for specificity to override bootstrap css
  .moreSpecificity {
    // similarly needed to override bootstrap css specificity (still looking for a better solution than this...)
    margin: 0;
    .unfilled {
      height: 3.125rem;
      color: $black-color;
      border: 0.125rem solid $border-color !important;
      border-radius: $input-border-radius;
      box-shadow: none !important; // TODO set the flag in bootstrap instead of doing this

      &:focus {
        color: $black-color;
      }

      @include valid-border-element-states;
    }

    .invalid {
      border: 3px solid $error-color !important;
      color: $error-color !important;
    }

    .filled {
      @extend .unfilled;
      border-color: $primary-light-color !important;

      @include valid-border-element-states;
    }

    // TODO is this used?
    .dropdown-readonly {
      @extend .filled;
      background-color: $primary-50-color !important;
    }

    .label {
      @include font-type('subtitle 1');
      color: $black-color;
    }

    .inlineText {
      @include font-type('subtitle 1');

      color: $primary-dark-color;
      margin-left: 15px;
      align-self: center;
    }

    .error {
      @include font-type('caption');

      color: $error-color;
    }

    .straightenRight {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .dropBtn {
      padding: 0 1.125rem;
      border-radius: 0 $input-border-radius $input-border-radius 0;
      box-shadow: none !important;
      display: flex;
    }

    .dropBtnUnfilled {
      background-color: $primary-100-color;
    }

    .dropBtnFilled {
      background-color: $primary-light-color;
    }

    .dropBtnInvalid {
      background-color: $error-color;
    }

    .dropBtnArrow {
      align-self: center;
      height: 4px;
      width: 0px;
      border: 8.5px transparent solid;
      border-bottom: 0;
      border-top: 12.5px white solid;
      border-radius: 10%;
    }

    .toggle {
      width: 100%;
      box-shadow: none;
      padding: 0;

      input,
      .form-control:disabled,
      .form-control[readonly] {
        cursor: pointer;
        background-color: white;
      }

      &::after {
        // hide the default dropdown button
        content: none;
        width: 0;
        padding: 0;
        margin: 0;
      }
    }

    .dropdown {
      flex-grow: 1;
      .dropdownMenu {
        min-width: 7.75rem;
        max-height: 12.5rem;
        overflow-y: auto;
        background-color: white;
        border: none;
        box-shadow: 0 0.125rem 0.5rem rgba(0, 0, 0, 0.18);
        .selected {
          background-color: $primary-50-color !important;
          &:before {
            position: absolute;
            width: 1.5rem;
            height: 1.5rem;
            right: 1rem;
            top: 0.8125rem;
            content: '';
            background-image: url('../../../assets/icons/misc/check.png');
            background-size: contain;
          }
        }
        .bodyFixedHeight {
          position: absolute;
          top: 1rem;
        }
        .dropdownItem {
          height: 3.125rem;
          position: relative;
          background-color: white;
          color: $disabled-high-emphasis-color;
          text-decoration-line: none;

          &:active,
          &.active,
          &:hover,
          &:focus {
            background-color: $primary-50-color;
          }
        }
      }
    }
  }
}

.small {
  width: 7.75rem;
}

.dropdownSVGContainer {
  @include svg-fill($primary-300-color, 2.5rem, 2.5rem);
}
